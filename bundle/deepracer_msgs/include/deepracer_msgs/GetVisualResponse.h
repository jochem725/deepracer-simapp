// Generated by gencpp from file deepracer_msgs/GetVisualResponse.msg
// DO NOT EDIT!


#ifndef DEEPRACER_MSGS_MESSAGE_GETVISUALRESPONSE_H
#define DEEPRACER_MSGS_MESSAGE_GETVISUALRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ColorRGBA.h>
#include <std_msgs/ColorRGBA.h>
#include <std_msgs/ColorRGBA.h>
#include <std_msgs/ColorRGBA.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Pose.h>

namespace deepracer_msgs
{
template <class ContainerAllocator>
struct GetVisualResponse_
{
  typedef GetVisualResponse_<ContainerAllocator> Type;

  GetVisualResponse_()
    : ambient()
    , diffuse()
    , specular()
    , emissive()
    , transparency(0.0)
    , visible(false)
    , geometry_type(0)
    , mesh_geom_filename()
    , mesh_geom_scale()
    , pose()
    , success(false)
    , status_message()  {
    }
  GetVisualResponse_(const ContainerAllocator& _alloc)
    : ambient(_alloc)
    , diffuse(_alloc)
    , specular(_alloc)
    , emissive(_alloc)
    , transparency(0.0)
    , visible(false)
    , geometry_type(0)
    , mesh_geom_filename(_alloc)
    , mesh_geom_scale(_alloc)
    , pose(_alloc)
    , success(false)
    , status_message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _ambient_type;
  _ambient_type ambient;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _diffuse_type;
  _diffuse_type diffuse;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _specular_type;
  _specular_type specular;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _emissive_type;
  _emissive_type emissive;

   typedef double _transparency_type;
  _transparency_type transparency;

   typedef uint8_t _visible_type;
  _visible_type visible;

   typedef uint16_t _geometry_type_type;
  _geometry_type_type geometry_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mesh_geom_filename_type;
  _mesh_geom_filename_type mesh_geom_filename;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _mesh_geom_scale_type;
  _mesh_geom_scale_type mesh_geom_scale;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  _status_message_type status_message;





  typedef boost::shared_ptr< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetVisualResponse_

typedef ::deepracer_msgs::GetVisualResponse_<std::allocator<void> > GetVisualResponse;

typedef boost::shared_ptr< ::deepracer_msgs::GetVisualResponse > GetVisualResponsePtr;
typedef boost::shared_ptr< ::deepracer_msgs::GetVisualResponse const> GetVisualResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace deepracer_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'gazebo_msgs': ['/opt/ros/kinetic/share/gazebo_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc31fa8acbe9027829e3607a7f9e7454";
  }

  static const char* value(const ::deepracer_msgs::GetVisualResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc31fa8acbe90278ULL;
  static const uint64_t static_value2 = 0x29e3607a7f9e7454ULL;
};

template<class ContainerAllocator>
struct DataType< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deepracer_msgs/GetVisualResponse";
  }

  static const char* value(const ::deepracer_msgs::GetVisualResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/ColorRGBA ambient\n\
std_msgs/ColorRGBA diffuse\n\
std_msgs/ColorRGBA specular\n\
std_msgs/ColorRGBA emissive\n\
float64 transparency\n\
bool visible\n\
uint16 geometry_type\n\
string mesh_geom_filename\n\
geometry_msgs/Vector3 mesh_geom_scale\n\
geometry_msgs/Pose pose\n\
bool success\n\
string status_message\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::deepracer_msgs::GetVisualResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ambient);
      stream.next(m.diffuse);
      stream.next(m.specular);
      stream.next(m.emissive);
      stream.next(m.transparency);
      stream.next(m.visible);
      stream.next(m.geometry_type);
      stream.next(m.mesh_geom_filename);
      stream.next(m.mesh_geom_scale);
      stream.next(m.pose);
      stream.next(m.success);
      stream.next(m.status_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetVisualResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deepracer_msgs::GetVisualResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deepracer_msgs::GetVisualResponse_<ContainerAllocator>& v)
  {
    s << indent << "ambient: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.ambient);
    s << indent << "diffuse: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.diffuse);
    s << indent << "specular: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.specular);
    s << indent << "emissive: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.emissive);
    s << indent << "transparency: ";
    Printer<double>::stream(s, indent + "  ", v.transparency);
    s << indent << "visible: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.visible);
    s << indent << "geometry_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.geometry_type);
    s << indent << "mesh_geom_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mesh_geom_filename);
    s << indent << "mesh_geom_scale: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.mesh_geom_scale);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "status_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEEPRACER_MSGS_MESSAGE_GETVISUALRESPONSE_H
